import { NextResponse } from "next/server";
import fs from "fs/promises";
import path from "path";

// 定义需要重置的具体文件模板
const RESET_FILES_TEMPLATE = {
    "app/layout.tsx": `import type { Metadata } from "next";
import "./globals.css";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={"antialiased"}
      >
        {children}
      </body>
    </html>
  );
}`,

    "app/page.tsx": `
export default function HomePage() {
  return (
    <main className="min-h-screen w-full bg-background flex flex-col gap-12">
     
    </main>
  );
}
`
};

async function deleteDirectory(dirPath: string): Promise<void> {
    try {
        await fs.rm(dirPath, { recursive: true, force: true });
    } catch (error) {
        // 忽略删除不存在目录的错误
        if ((error as any).code !== 'ENOENT') {
            throw error;
        }
    }
}

async function deleteComponentsExceptUI(componentsPath: string): Promise<number> {
    let deletedCount = 0;

    try {
        const items = await fs.readdir(componentsPath, { withFileTypes: true });

        for (const item of items) {
            // 跳过 ui 文件夹
            if (item.name === 'ui') {
                continue;
            }

            const itemPath = path.join(componentsPath, item.name);

            if (item.isDirectory()) {
                await deleteDirectory(itemPath);
                deletedCount++;
            } else {
                await fs.unlink(itemPath);
                deletedCount++;
            }
        }
    } catch (error) {
        if ((error as any).code !== 'ENOENT') {
            console.error('删除components目录内容失败:', error);
            throw error;
        }
    }

    return deletedCount;
}

async function cleanAppDirectory(appPath: string): Promise<number> {
    let deletedCount = 0;

    // 保留的文件列表
    const preservedFiles = ['favicon.ico', 'globals.css', 'layout.tsx', 'page.tsx'];

    try {
        const items = await fs.readdir(appPath, { withFileTypes: true });

        for (const item of items) {
            // 跳过保留的文件
            if (preservedFiles.includes(item.name)) {
                continue;
            }

            const itemPath = path.join(appPath, item.name);

            if (item.isDirectory()) {
                await deleteDirectory(itemPath);
                deletedCount++;
            } else {
                await fs.unlink(itemPath);
                deletedCount++;
            }
        }
    } catch (error) {
        if ((error as any).code !== 'ENOENT') {
            console.error('删除app目录内容失败:', error);
            throw error;
        }
    }

    return deletedCount;
}

async function resetSpecificFiles(basePath: string): Promise<void> {
    for (const [filePath, content] of Object.entries(RESET_FILES_TEMPLATE)) {
        const fullPath = path.join(basePath, filePath);
        const dir = path.dirname(fullPath);

        // 确保目录存在
        await fs.mkdir(dir, { recursive: true });

        // 写入文件内容
        await fs.writeFile(fullPath, content, 'utf-8');
    }
}

export async function POST(request: Request) {
    try {
        const { confirmReset = false } = await request.json();

        if (!confirmReset) {
            return NextResponse.json({
                success: false,
                error: "需要确认重置操作"
            }, { status: 400 });
        }

        const sandboxPath = path.join(process.cwd(), 'sandbox');
        const componentsPath = path.join(sandboxPath, 'components');
        const appPath = path.join(sandboxPath, 'app');

        // 记录重置开始
        console.log('🔄 开始重置sandbox...');

        let deletedComponentsCount = 0;
        let deletedAppItemsCount = 0;
        let resetFilesCount = 0;

        // 1. 删除 components/ 下除了 ui 文件夹的所有内容
        try {
            deletedComponentsCount = await deleteComponentsExceptUI(componentsPath);
            console.log(`✅ 已删除 ${deletedComponentsCount} 个组件文件/文件夹`);
        } catch (error) {
            console.warn('警告: 删除components文件时出错:', error);
        }

        // 2. 删除 app/ 下除了指定保留文件的所有内容
        try {
            deletedAppItemsCount = await cleanAppDirectory(appPath);
            console.log(`✅ 已删除 app/ 下 ${deletedAppItemsCount} 个文件/文件夹`);
        } catch (error) {
            console.warn('警告: 删除app目录文件时出错:', error);
        }

        // 3. 重置指定的文件 (layout.tsx 和 page.tsx)
        try {
            await resetSpecificFiles(sandboxPath);
            resetFilesCount = Object.keys(RESET_FILES_TEMPLATE).length;
            console.log(`✅ 已重置 ${resetFilesCount} 个文件`);
        } catch (error) {
            console.error('重置文件失败:', error);
            throw error;
        }

        console.log('✅ Sandbox重置完成');

        return NextResponse.json({
            success: true,
            message: "Sandbox已成功重置",
            details: {
                resetAt: new Date().toISOString(),
                deletedComponents: deletedComponentsCount,
                deletedAppItems: deletedAppItemsCount,
                resetFiles: resetFilesCount,
                resetFilesList: Object.keys(RESET_FILES_TEMPLATE),
                preservedDirectories: ['node_modules', '.next', 'components/ui'],
                preservedAppFiles: ['favicon.ico', 'globals.css', 'layout.tsx', 'page.tsx'],
                preservedFiles: ['其他配置文件保持不变']
            }
        });

    } catch (error: any) {
        console.error('❌ 重置sandbox失败:', error);
        return NextResponse.json({
            success: false,
            error: `重置失败: ${error.message}`
        }, { status: 500 });
    }
}

export async function GET() {
    return NextResponse.json({
        success: true,
        message: "Sandbox重置API可用",
        resetScope: {
            description: "选择性重置 - 删除自定义组件、清理app目录、重置核心文件",
            deletedContent: [
                "components/ 目录下除 ui 文件夹外的所有文件和文件夹",
                "app/ 目录下除 favicon.ico, globals.css, layout.tsx, page.tsx 外的所有文件和文件夹"
            ],
            resetFiles: Object.keys(RESET_FILES_TEMPLATE),
            preservedContent: [
                "components/ui/ - shadcn/ui 组件库",
                "app/favicon.ico, app/globals.css - 保留的应用文件",
                "node_modules/ - 依赖包",
                ".next/ - 构建缓存",
                "其他配置文件 - package.json, tsconfig.json, tailwind.config.js 等",
                "lib/ - 工具函数",
                "public/ - 静态资源"
            ]
        }
    });
}
