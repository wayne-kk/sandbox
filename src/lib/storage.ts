import fs from "fs/promises";
import path from "path";

export async function saveFile(filePath: string, content: string) {
    const fullPath = path.join(process.cwd(), "sandbox", filePath);

    // 确保目录存在
    await fs.mkdir(path.dirname(fullPath), { recursive: true });

    // 写入文件
    await fs.writeFile(fullPath, content, "utf-8");
}

export async function readFile(filePath: string): Promise<string> {
    const fullPath = path.join(process.cwd(), "sandbox", filePath);
    return await fs.readFile(fullPath, "utf-8");
}

export async function fileExists(filePath: string): Promise<boolean> {
    try {
        const fullPath = path.join(process.cwd(), "sandbox", filePath);
        await fs.access(fullPath);
        return true;
    } catch {
        return false;
    }
}

export async function createDefaultProject() {
    const defaultFiles = [
        {
            path: "app/page.tsx",
            content: `export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-4xl font-bold">Hello, Next.js!</h1>
      <p className="mt-4 text-lg text-gray-600">
        欢迎使用在线代码编辑器
      </p>
    </div>
  );
}`
        },
        {
            path: "app/layout.tsx",
            content: `import type { Metadata } from 'next'
import './globals.css'

export const metadata: Metadata = {
  title: 'My Next.js App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}`
        },
        {
            path: "app/globals.css",
            content: `@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}`
        },
        {
            path: "components/Button.tsx",
            content: `interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  className?: string;
}

export default function Button({ children, onClick, className }: ButtonProps) {
  return (
    <button 
      onClick={onClick}
      className={\`px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 \${className}\`}
    >
      {children}
    </button>
  );
}`
        }
    ];

    for (const file of defaultFiles) {
        await saveFile(file.path, file.content);
    }
} 