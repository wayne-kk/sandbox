// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// 用户模型 - 简化版
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联的项目
  projects UserProject[]

  @@map("users")
}

// 用户项目 - 基于模板创建的项目实例
model UserProject {
  id          String   @id @default(cuid())
  userId      String
  name        String   // 项目名称，如 "我的React应用"
  description String?  // 项目描述
  framework   String   @default("react") // react, vue, next, vanilla
  template    String   @default("default") // 基于哪个模板创建
  isPublic    Boolean  @default(false) // 是否公开
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastOpenAt  DateTime @default(now()) // 最后打开时间

  // 关联用户和文件
  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  files ProjectFile[]

  @@map("user_projects")
  @@index([userId, lastOpenAt])
}

// 项目文件
model ProjectFile {
  id        String   @id @default(cuid())
  projectId String
  filePath  String   // 文件路径，如 "src/App.tsx"
  content   String   // 文件内容
  size      Int      @default(0) // 文件大小（字节）
  language  String?  // 文件语言类型
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project UserProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_files")
  @@unique([projectId, filePath]) // 同一个项目中文件路径唯一
  @@index([projectId])
}

// 模板定义 - 系统预设的模板
model Template {
  id          String   @id @default(cuid())
  name        String   @unique // 模板名称，如 "react-basic", "vue-starter"
  displayName String   // 显示名称，如 "React 基础模板"
  description String?  // 模板描述
  framework   String   // 框架类型
  isActive    Boolean  @default(true) // 是否启用
  sortOrder   Int      @default(0) // 排序
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 模板文件
  files TemplateFile[]

  @@map("templates")
}

// 模板文件
model TemplateFile {
  id         String   @id @default(cuid())
  templateId String
  filePath   String   // 文件路径
  content    String   // 文件内容
  isReadonly Boolean  @default(false) // 是否只读
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_files")
  @@unique([templateId, filePath])
  @@index([templateId])
} 